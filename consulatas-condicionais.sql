/* CONSULTAS COM ALIAS */
SELECT CPF AS IDENTIFICADOR, NOME AS CLIENTE FROM tabela_de_clientes;

/* BETWEEN */
SELECT * FROM tabela_de_produtos WHERE PRECO_DE_LISTA BETWEEN 19.50 AND 19.52;

/* NOT */
SELECT * FROM tabela_de_produtos WHERE SABOR = 'Manga' AND NOT(TAMANHO = '470 ml');

/* IN */
SELECT * FROM tabela_de_produtos WHERE SABOR IN('Laranja', 'Uva');
SELECT * FROM tabela_de_clientes WHERE CIDADE IN('Rio de Janeiro', 'São Paulo') AND IDADE > 20;

/* LIKE */
SELECT * FROM tabela_de_clientes WHERE NOME LIKE '%Silva%';

/* DISTINCT */
SELECT DISTINCT EMBALAGEM, TAMANHO FROM tabela_de_produtos;

/* LIMITAR TAMANHO DA SAIDA */
SELECT * FROM tabela_de_produtos LIMIT 10;

/* APARTIR DO INDICE PROXIMOS REGISTROS */
SELECT * FROM tabela_de_produtos LIMIT 2,3;

/* ORDENAR */
/* ORDER BY: DESC -> maior para menor. ASC -> menor para maior */
SELECT * FROM tabela_de_produtos ORDER BY PRECO_DE_LISTA;
SELECT * FROM tabela_de_produtos ORDER BY PRECO_DE_LISTA, TAMANHO;

/* AGRUPAR */
/* SUM, AVG, MAX, MIN, COUNT*/
SELECT SABOR, AVG(PRECO_DE_LISTA) AS VALOR_MEDIO FROM tabela_de_produtos GROUP BY SABOR;

SELECT ESTADO, BAIRRO, SUM(LIMITE_DE_CREDITO) AS LIMITE FROM tabela_de_clientes
WHERE CIDADE = 'Rio de Janeiro'
GROUP BY ESTADO, BAIRRO
ORDER BY BAIRRO;


/* FILTRO HAVING */
SELECT ESTADO, SUM(LIMITE_DE_CREDITO) AS SOMA_LIMITE FROM tabela_de_clientes
GROUP BY ESTADO
HAVING SUM(LIMITE_DE_CREDITO) > 900000;

SELECT EMBALAGEM, MAX(PRECO_DE_LISTA) AS MAX_PRECO, MIN(PRECO_DE_LISTA) AS MIN_PRECO FROM tabela_de_produtos
GROUP BY EMBALAGEM
HAVING MAX(PRECO_DE_LISTA) > 5;

/* CLASSIFICAR RESULTADOS */
SELECT EMBALAGEM,
CASE 
	WHEN PRECO_DE_LISTA >= 12 THEN 'PRODUTO CARO'
	WHEN PRECO_DE_LISTA >= 7 AND PRECO_DE_LISTA < 12 THEN 'PRODUTO EM CONTA'
    ELSE 'PRODUTO BARATO'
END AS STATUS_PRECO, AVG(PRECO_DE_LISTA) AS PRECO_MEDIO
FROM tabela_de_produtos
GROUP BY EMBALAGEM,
CASE 
	WHEN PRECO_DE_LISTA >= 12 THEN 'PRODUTO CARO'
	WHEN PRECO_DE_LISTA >= 7 AND PRECO_DE_LISTA < 12 THEN 'PRODUTO EM CONTA'
    ELSE 'PRODUTO BARATO'
END
ORDER BY EMBALAGEM;

-- SÓ PARA AS MANGAS
SELECT EMBALAGEM,
CASE 
	WHEN PRECO_DE_LISTA >= 12 THEN 'PRODUTO CARO'
	WHEN PRECO_DE_LISTA >= 7 AND PRECO_DE_LISTA < 12 THEN 'PRODUTO EM CONTA'
    ELSE 'PRODUTO BARATO'
END AS STATUS_PRECO, AVG(PRECO_DE_LISTA) AS PRECO_MEDIO
FROM tabela_de_produtos
WHERE SABOR = 'Manga'
GROUP BY EMBALAGEM,
CASE 
	WHEN PRECO_DE_LISTA >= 12 THEN 'PRODUTO CARO'
	WHEN PRECO_DE_LISTA >= 7 AND PRECO_DE_LISTA < 12 THEN 'PRODUTO EM CONTA'
    ELSE 'PRODUTO BARATO'
END
ORDER BY EMBALAGEM;

/* JOIN */
SELECT * FROM tabela_de_vendedores A
INNER JOIN notas_fiscais B
ON A.MATRICULA = B.MATRICULA;

SELECT A.MATRICULA, A.NOME, COUNT(*) FROM tabela_de_vendedores A
INNER JOIN notas_fiscais B
ON A.MATRICULA = B.MATRICULA
GROUP BY A.MATRICULA, A.NOME;

/* LEFT AND RIGHT JOIN */
SELECT COUNT(*) FROM tabela_de_clientes;

SELECT CPF, COUNT(*) FROM notas_fiscais
GROUP BY CPF;

SELECT DISTINCT A.CPF, A.NOME, B.CPF FROM tabela_de_clientes A
INNER JOIN notas_fiscais B
ON A.CPF = B.CPF;

/* ESTA NA TABELA DE CLIENTES MAIS NAO TEM NADA NA TABELA DE NOTAS FISCAIS (FABIO)*/
SELECT DISTINCT A.CPF, A.NOME, B.CPF FROM tabela_de_clientes A
LEFT JOIN notas_fiscais B
ON A.CPF = B.CPF;

/* CLIENTES CADASTRADOS QUE NUNCA FIZERAM UMA COMPRA */
SELECT DISTINCT A.CPF, A.NOME, B.CPF FROM tabela_de_clientes A
LEFT JOIN notas_fiscais B
ON A.CPF = B.CPF
WHERE B.CPF IS NULL;

SELECT DISTINCT A.CPF, A.NOME, B.CPF FROM tabela_de_clientes A
RIGHT JOIN notas_fiscais B
ON A.CPF = B.CPF;

/* FULL E CROSS JOIN */
-- ROBERTA TEM UM ESCRITORIO NUM LUGAR ERRADO, PODIA TER UM ESCRITORIO PERTO DOS CLIENTES
SELECT A.BAIRRO, A.NOME, A.DE_FERIAS, B.BAIRRO, B.NOME FROM tabela_de_vendedores A
LEFT JOIN tabela_de_clientes B
ON A.BAIRRO = B.BAIRRO;

-- CLIENTES QUE MORAM EM UM LOCAL ONDE NÃO HÁ ESCRITORIO
SELECT A.BAIRRO, A.NOME, A.DE_FERIAS, B.BAIRRO, B.NOME FROM tabela_de_vendedores A
RIGHT JOIN tabela_de_clientes B
ON A.BAIRRO = B.BAIRRO;

-- DUAS INFORMAÇÕES AO MESMO TEMPO (FULL JOIN)
SELECT A.BAIRRO, A.NOME, A.DE_FERIAS, B.BAIRRO, B.NOME FROM tabela_de_vendedores A
LEFT JOIN tabela_de_clientes B
ON A.BAIRRO = B.BAIRRO
UNION
SELECT A.BAIRRO, A.NOME, A.DE_FERIAS, B.BAIRRO, B.NOME FROM tabela_de_vendedores A
RIGHT JOIN tabela_de_clientes B
ON A.BAIRRO = B.BAIRRO;

/* CROSS JOIN - ANALISE COMBINATORIA */
SELECT A.BAIRRO, A.NOME, A.DE_FERIAS, B.BAIRRO, B.NOME FROM tabela_de_vendedores A, tabela_de_clientes B;

/* UNION (DISTINCT), UNION ALL (DE AMBAS AS TABELAS) */
SELECT DISTINCT BAIRRO, NOME, 'CLIENTE' AS TIPO FROM tabela_de_clientes
UNION
SELECT DISTINCT BAIRRO, NOME, 'VENDEDOR' AS TIPO FROM tabela_de_vendedores;

/* SUB-CONSULTAS */
SELECT DISTINCT BAIRRO FROM tabela_de_vendedores;

SELECT * FROM tabela_de_clientes 
WHERE BAIRRO IN(
	SELECT DISTINCT BAIRRO FROM tabela_de_vendedores
);

/* CONSULTA COMO TABELA */
SELECT X.EMBALAGEM, X.PRECO_MAXIMO FROM 
(SELECT EMBALAGEM, MAX(PRECO_DE_LISTA) AS PRECO_MAXIMO FROM tabela_de_produtos
GROUP BY EMBALAGEM) X
WHERE X.PRECO_MAXIMO >= 10;

/* VIEW - VISÃO */
SELECT * FROM VW_MAIORES_EMBALAGENS;

SELECT X.EMBALAGEM, X.MAIOR_PRECO FROM
VW_MAIORES_EMBALAGENS X
WHERE X.MAIOR_PRECO >= 10;

SELECT A.NOME_DO_PRODUTO, A.EMBALAGEM, A.PRECO_DE_LISTA, X.MAIOR_PRECO
FROM tabela_de_produtos A
INNER JOIN VW_MAIORES_EMBALAGENS X
ON A.EMBALAGEM = X.EMBALAGEM;





